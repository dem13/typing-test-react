{"version":3,"sources":["TypeTest/TypeText/TypeText.js","TypeTest/TypeInput/TypeInput.js","TypeTest/TypeTest.js","App.js","serviceWorker.js","index.js"],"names":["typeText","props","classes","wordClasses","remainingWords","remainingText","split","currentWord","firstWord","shift","remainingWord","substring","length","error","startsWith","push","className","join","finishedText","typeInput","invalid","onChange","changed","value","type","TypeTest","state","started","invalidWord","time","stopwatchInterval","result","accuracy","generateTextToType","startGame","setState","setInterval","restartClickHandler","clearInterval","currentWordChangedHandler","e","target","words","isLastWord","word","splice","computeResult","text","this","toFixed","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.dc5e3fab.chunk.js","sourcesContent":["import React from \"react\";\nimport './TypeText.css';\n\n\nfunction typeText(props) {\n  let classes = ['type-text'];\n  let wordClasses = ['remaining-word'];\n\n\n  let remainingWords = props.remainingText.split(' ');\n\n  let currentWord = props.currentWord;\n  let firstWord = remainingWords.shift();\n  let remainingWord = firstWord.substring(props.currentWord.length);\n  let error = firstWord.startsWith(currentWord) ? false : true;\n\n\n  // console.log(remainingWord);\n\n  if (props.remainingText === '') {\n    classes.push('finished');\n  }\n\n  if (error) {\n    remainingWord = ' ' + firstWord  + ' ';\n    currentWord = '';\n    wordClasses.push('invalid-word');\n  } else {\n    if (currentWord === '') {\n      remainingWord = ' ' + remainingWord + ' ';\n    } else if (remainingWord === '') {\n      currentWord = ' ' + currentWord + ' ';\n    } else {\n      currentWord = ' ' + currentWord;\n      remainingWord += ' ';\n    }\n  }\n\n  return (\n    <div className={classes.join(' ')}>\n      <span className=\"finished-text\">{props.finishedText}</span>\n      <span className=\"current-word\">{currentWord}</span>\n      <span className={wordClasses.join(' ')}>{remainingWord}</span>\n      <span className=\"remaining-text\">{remainingWords.join(' ')}</span>\n    </div>\n  );\n}\n\nexport default typeText;","import React from \"react\";\nimport './TypeInput.css';\n\nfunction typeInput(props) {\n  let classes = ['type-input'];\n\n  if(props.invalid) {\n    classes.push('invalid')\n  }\n\n  return (\n    <div className={classes.join(' ')}>\n      <input onChange={props.changed} value={props.currentWord} type=\"text\"/>\n    </div>\n  );\n}\n\nexport default typeInput;","import React, {Component} from \"react\";\nimport './TypeTest.css';\n\nimport TypeText from \"./TypeText/TypeText\";\nimport TypeInput from \"./TypeInput/TypeInput\";\n\nclass TypeTest extends Component {\n  state = {\n    started: false,\n    currentWord: '',\n    remainingText: null,\n    finishedText: '',\n    invalidWord: false,\n    time: 0,\n    stopwatchInterval: null,\n    result: null,\n    accuracy: 1\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state.remainingText = this.generateTextToType();\n  }\n\n  generateTextToType = () => {\n    //TODO: Randomly generate text\n    return 'this is text to type, enjoy!';\n  };\n\n  startGame = () => {\n    this.setState({\n      started: true,\n      time: 0,\n      stopwatchInterval: setInterval((time) => {\n        this.setState({time: ++this.state.time})\n      }, 10)\n    });\n  };\n\n  restartClickHandler = () => {\n    clearInterval(this.state.stopwatchInterval);\n\n    this.setState({\n      started: false,\n      currentWord: '',\n      remainingText: this.generateTextToType(),\n      finishedText: '',\n      invalidWord: false,\n      time: 0,\n      stopwatchInterval: null,\n      result: null\n    });\n  };\n\n  computeResult(text, time) {\n    return 6000 * text.length / time;\n  }\n\n\n  currentWordChangedHandler = (e) => {\n    if (!this.state.started) {\n      this.startGame()\n    }\n\n    let currentWord = e.target.value;\n    let remainingText = this.state.remainingText;\n    let finishedText = this.state.finishedText;\n    let result = this.state.result;\n    let invalidWord = false;\n\n    let words = [];\n\n    if(this.state.remainingText !== '') {\n      words = this.state.remainingText.split(' ');\n    }\n\n    const isLastWord = words.length === 1;\n\n    if (currentWord[currentWord.length - 1] === ' ' || isLastWord) {\n      let word = isLastWord ? currentWord : currentWord.substring(0, currentWord.length - 1);\n\n      if (words[0] === word) {\n        finishedText = finishedText + \" \" + words[0];\n        words.splice(0, 1);\n        remainingText = words.join(' ');\n        currentWord = '';\n      }\n    }\n\n    if (words.length === 0) {\n      if (this.state.stopwatchInterval !== null) {\n        clearInterval(this.state.stopwatchInterval);\n      }\n\n      result = this.computeResult(finishedText, this.state.time);\n    } else {\n      if (!words[0].startsWith(currentWord)) {\n        invalidWord = true;\n      }\n    }\n\n    this.setState({currentWord, remainingText, finishedText, invalidWord, result})\n  };\n\n  render() {\n    return (\n      <div className=\"type-test\">\n        <TypeText currentWord={this.state.currentWord} finishedText={this.state.finishedText} remainingText={this.state.remainingText}/>\n        {this.state.remainingText.length === 0 ? <div>{(this.state.result / 5).toFixed(2)}WPM</div> : null}\n        <div className=\"timer\">\n          {(this.state.time / 100).toFixed(1)}\n        </div>\n\n        <TypeInput\n          invalid={this.state.invalidWord}\n          changed={this.currentWordChangedHandler}\n          currentWord={this.state.currentWord}/>\n\n        <div className=\"control\">\n          <button onClick={this.restartClickHandler}>Restart</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TypeTest;","import React, {Component} from 'react';\nimport './App.css';\n\nimport TypeTest from './TypeTest/TypeTest';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <TypeTest/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}